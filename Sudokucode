
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.time.StopWatch;
import org.slf4j.LoggerFactory;
import org.slf4j.Logger;

import java.util.ArrayList;


import java.io.FileReader;


import java.io.BufferedReader;
import java.io.FileNotFoundException;

import java.io.IOException;

import java.util.concurrent.*;

import java.util.concurrent.atomic.AtomicInteger;

public class Main {

    private static final Logger log = LoggerFactory.getLogger(Main.class);
    static ArrayList<int[][]> lista = new ArrayList<>();
    static int tamano;
    static int maximo;
    public static int[][] sudokusolucion;
    public static int[][] sudokuoriginal;
    public static ExecutorService executorService = Executors.newFixedThreadPool(1);

    public static void main(String[] args) throws InterruptedException, IOException {

        if (LecturaSudoku()) {

            final StopWatch stopWatch = StopWatch.createStarted();
            sudokusolucion = sudokuoriginal;

            int[][] dd = sudokuoriginal;
            for (int i = 0; i < maximo; i++) {

                for (int j = 0; j < maximo; j++) {
                    System.out.print(sudokusolucion[j][i] + ", ");
                }
                System.out.println();
            }
            System.out.println();
            for (int i = 0; i < maximo; i++) {

                for (int j = 0; j < maximo; j++) {
                    System.out.print(sudokuoriginal[j][i] + ", ");

                }
                System.out.println();
            }

            System.out.println();
            ResolverSudoku(0, 0);

            executorService.shutdown();

            if (executorService.awaitTermination(0, TimeUnit.SECONDS)) {
                log.debug("Se encontraron {} en {}",SudokuVerificacion.getContador(),stopWatch);
            }
        }
    }


    public static boolean LecturaSudoku() throws IOException {
        String nombre = "C:\\sudoku.txt";

        int fila = 0;
        int columna = 0;
        try {
            BufferedReader bf = new BufferedReader(new FileReader(nombre));
            String linea;
            linea = bf.readLine();
            maximo = Integer.parseInt(linea);
            sudokusolucion = new int[maximo][maximo];
            sudokuoriginal = new int[maximo][maximo];
            while ((tamano * tamano) != maximo) {
                tamano++;
            }
            while ((linea = bf.readLine()) != null) {
                String dato[] = StringUtils.split(linea, " ");
                for (int i = 0; i < maximo; i++) {
                    sudokuoriginal[i][fila] = Integer.parseInt(dato[i]);
                }

                columna = 0;
                fila++;
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static class matriz {
        int[][] sud;

        public matriz(int[][] sudoku) {
            this.sud = sudoku;
        }

        public int[][] getSud() {
            return sud;
        }
    }

    public static void ResolverSudoku(int columna, int fila) {

        if (fila == maximo) {
            int [][] nuevo=new int[maximo][maximo];
            for(int i=0;i<maximo;i++){
                for (int j=0;j<maximo;j++){
                    nuevo[i][j]=sudokusolucion[i][j];
                }
            }

            executorService.submit(new SudokuVerificacion(nuevo));


        } else {

            if (columna == maximo) {
                ResolverSudoku(0, fila + 1);
            } else {
                if (sudokusolucion[columna][fila] == 0) {
                    for (int i = 1; i < maximo + 1; i++) {
                        sudokusolucion[columna][fila] = i;
                        ResolverSudoku(columna + 1, fila);

                    }
                    sudokusolucion[columna][fila]=0;

                } else {
                    ResolverSudoku(columna + 1, fila);
                }
            }

        }

    }

    private static class SudokuVerificacion implements Runnable {


        private int[][] sudokuP;

        private final static AtomicInteger contador = new AtomicInteger(0);

        public SudokuVerificacion(final int[][] sudokuP) {
            this.sudokuP = sudokuP;
        }

        /**
         * Corre SudokuVerificacion, revisa si e un espacio posible
         * para dar ingreso el numero y crea mas hilos
         */
        @Override
        public void run() {

            if (recorrer(sudokuP)) {
                contador.getAndIncrement();
                for (int i = 0; i < maximo; i++) {
                    for (int j = 0; j < maximo; j++) {
                        System.out.print(sudokuP[j][i] + ", ");
                    }
                    System.out.println();
                }

                System.out.println();
            }
        }

        public static int getContador() {
            return contador.get();
        }

        private static boolean recorrer(final int[][] sudoku) {
            for (int i = 0; i < maximo; i++) {
                for (int j = 0; j < maximo; j++) {
                    if (!verificacioncuadrante(i, j, sudoku, sudoku[i][j])) {
                        return false;
                    }
                }
            }
            return true;
        }

        private static boolean verificacioncuadrante(final int columna, final int fila, final int[][] sudoku, final int numero) {


            for (int i = 0; i < maximo; i++) {
                if (columna != i) {
                    if (sudoku[i][fila] == numero) {
                        return false;
                    }
                }
            }
            for (int i = 0; i < maximo; i++) {
                if (fila != i) {
                    if (sudoku[columna][i] == numero) {
                        return false;
                    }
                }
            }
            int col=columna/tamano;
            int fil=fila/tamano;
            col=col*tamano;
            fil=fil*tamano;
            for(int i=fil;i<fil+tamano;i++){
                for (int j=col;i<col+tamano;j++){
                    if(columna!=j&&fila!=i){
                        if(sudoku[j][i]==numero){
                            return false;
                        }
                    }
                }
            }

            return true;
        }
    }

}

